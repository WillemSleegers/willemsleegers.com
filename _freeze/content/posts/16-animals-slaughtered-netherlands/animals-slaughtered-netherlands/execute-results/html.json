{
  "hash": "1db8a10a14d44800cd684d1852e3db76",
  "result": {
    "markdown": "---\ntitle: \"Animals slaughtered in the Netherlands\"\neditor: visual\nformat: \n  html:\n    include-in-header: counter.html\ndraft: true\n---\n\n\nIn this post I take a look at how many animals are slaughtered in the Netherlands. The goal is to find and clean the data to answer this question and feel horrible about what we'll find. I'll go through the entire process of getting the data, trying to understand it, and thinking of ways to visualize the data.\n\n## Data\n\nThe data on number of animals slaughtered in the Netherlands can be found on StatLine, a database managed by CBS. Specifically, we're going to take a look at the meat production. The data of that can be found in a table [here](https://opendata.cbs.nl/#/CBS/nl/dataset/7123slac/table?ts=1663151766192). The table shows both the number of animals as well as their weight. I'm only interested in the number of animals, so I deselect all the weight-related rows. I also see that they offer data on more dates than it shown by default, so I select all of the dates. I then download the data as a .csv file using a button in the top right corner. Now we can start.\n\n## Setup\n\nRun the following setup code if you want to follow along. You can download the data yourself or use my [file](meat-production-netherlands.csv).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\n\n# Load data\ndata <- read_csv2(\"meat-production-netherlands.csv\")\n\n# Set default ggplot\ntheme_set(theme_minimal())\n```\n:::\n\n\nNote that we have to use `read_csv2()` because the data values are separated by a semi-colon. This is an annoying default in the Netherlands (and probably elsewhere in Europe).\n\n## Data cleaning\n\nLet's begin by inspecting the first few rows of the data.\n\n\n::: {.cell tbl-cap='First 6 rows of the data.'}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  Slachtdieren     Perioden      `Aantal slachtingen (x 1 000)`\n  <chr>            <chr>                                  <dbl>\n1 Rundvee (totaal) 1990 januari                            194.\n2 Rundvee (totaal) 1990 februari                           160.\n3 Rundvee (totaal) 1990 maart                              190.\n4 Rundvee (totaal) 1990 april                              174.\n5 Rundvee (totaal) 1990 mei                                201.\n6 Rundvee (totaal) 1990 juni                               172.\n```\n:::\n:::\n\n\nIt should be no surprise, but the data is in Dutch. I don't like that, so let's translate the data, starting with the columns. One of the columns is called 'Aantal slachtingen (x 1 000)', which means number of slaughtered animals in units of 1000. Instead of translating this directly, I will simply rename it to `count` and multiply the values by 1000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>%\n  rename(\n    animal = Slachtdieren,\n    period = Perioden,\n    count = `Aantal slachtingen (x 1 000)`\n  ) %>%\n  mutate(count = count * 1000)\n```\n:::\n\n\nLet's clean up the `period` column next. It seems like it contains the year and the month (in Dutch). I can translate the month names to Dutch, but I first want to make sure that all data values are structured the same way. `count()` is a great function to inspect that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  count(period) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  period            n\n  <chr>         <int>\n1 1990             17\n2 1990 april       17\n3 1990 augustus    17\n4 1990 december    17\n5 1990 februari    17\n6 1990 januari     17\n```\n:::\n:::\n\n\nCuriously, not all rows in the data contain both the year *and* the month. Some only have the year. This is important because that means we can't just sum the number of slaughtered animals per year because that means we'll actually get *twice* the number of animals because we'll sum both the animals slaughtered in that year and each month of that year.\n\nWhat I want to do next is create a new column that only contains the year and another column that contains the month. Creating the year column is easy because we can use `parse_number()` to extract the year from the data. The month is a bit trickier, but we can use a regular expression to remove the year, leaving us with the month. We use `str_remove()` and tell it to remove a string pattern that consists of 4 numbers and a space. In addition to that, we need to remove an asterisk from some of the months because the most recent months have an asterisk because these are not yet the final numbers. In fact, we can add a column to say whether the numbers are final or not based on this asterisk. After doing that, we can recode the month values that need to be translated and also convert the empty string to a missing value. Finally, we remove the `period` column because we don't need it anymore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>%\n  mutate(\n    year = parse_number(period),\n    month = str_remove(period, \"[0-9]{4} ?\"),\n    final = if_else(str_detect(period, \"\\\\*\"), \"no\", \"yes\"),\n    month = str_remove(month, \"\\\\*\"),\n    month = recode(month,\n      \"augustus\" = \"august\",\n      \"februari\" = \"february\",\n      \"januari\" = \"january\",\n      \"juli\" = \"july\",\n      \"juni\" = \"june\",\n      \"maart\" = \"march\",\n      \"mei\" = \"may\",\n      \"oktober\" = \"october\",\n    ),\n    month = na_if(month, \"\")\n  ) %>%\n  select(-period)\n```\n:::\n\n\nNext are the animals. Let's take a look at the unique values we have.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(data, animal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 2\n   animal                                   n\n   <chr>                                <int>\n 1 Eenhoevigen                            422\n 2 Geiten (totaal)                        422\n 3 Kalkoenen                              422\n 4 Kalveren jonger dan 9 maanden          422\n 5 Kalveren van 9 tot en met 12 maanden   422\n 6 Koeien                                 422\n 7 Overig pluimvee                        422\n 8 Overige kippen                         422\n 9 Rundvee (totaal)                       422\n10 Schapen incl. lammeren                 422\n11 Schapenlammeren                        422\n12 Stieren                                422\n13 Totaal kalveren                        422\n14 Totaal volwassen runderen              422\n15 Vaarzen                                422\n16 Varkens (totaal)                       422\n17 Vleeskuikens                           422\n```\n:::\n:::\n\n\nHmm... it looks like there are a few challenges here. First, we seem to have both total values and non-total values, so we should take care to separate these, probably by removing them and only keeping the data that adds up to form the total. Second, we need to figure out what each word means. Even my Dutch is not helping me in understanding each type of animal.\n\nLet's first simply translate the values so we get a better grasp of what we are dealing with. The translations won't be direct translations. Instead, I already think about what kind of categories make sense and how I want to later plot the data, so I translate the values into names that will also be useful later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- mutate(data, \n  animal = recode(animal, \n    \"Eenhoevigen\" = \"ungulates (mostly horses)\",\n    \"Geiten (totaal)\" = \"goats\",\n    \"Kalkoenen\" = \"turkeys\",\n    \"Kalveren jonger dan 9 maanden\" = \"calves (< 9 months)\",\n    \"Kalveren van 9 tot en met 12 maanden\" = \"calves (9-12 months)\",\n    \"Koeien\" = \"cows\",\n    \"Overig pluimvee\" = \"poultry (misc)\",\n    \"Overige kippen\" = \"chicken (mostly layers)\",\n    \"Rundvee (totaal)\" = \"cattle\",\n    \"Schapen incl. lammeren\" = \"sheep\",\n    \"Schapenlammeren\" = \"lambs\",\n    \"Stieren\" = \"bulls\",\n    \"Totaal kalveren\" = \"calves\",\n    \"Totaal volwassen runderen\" = \"adult cattle (total)\",\n    \"Vaarzen\" = \"heifers\",\n    \"Varkens (totaal)\" = \"pigs\",\n    \"Vleeskuikens\" = \"broilers\"\n  )\n)\n```\n:::\n\n\nTranslating the words was very helpful to better understand the data. One thing that's clear is that some of the values are totals of other values. Below I list which values in the data are actually sums of other values:\n\n-   adult cattle: Total of cows, heifers, and bulls\n\n-   cattle: Total of adult cattle and calves\n\n-   calves: Total of calves (\\< 9 months) and calves (9-12 months)\n\nIf we are interested in what the totals are made of, we can remove the total columns and reconstruct them later if we want to. This works for the first two total columns, but not calves because they only started making the distinction between young and older calves in 2009. So let's instead remove the values that the total values are made of.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- filter(data, !animal %in% c(\"adult cattle (total)\", \"cows\", \n  \"heifers\", \"bulls\", \"calves\",\"calves (< 9 months)\", \"calves (9-12 months)\",\n  \"lambs\")\n)\n```\n:::\n\n\nThis leaves us with the following animals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(data, animal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  animal                        n\n  <chr>                     <int>\n1 broilers                    422\n2 cattle                      422\n3 chicken (mostly layers)     422\n4 goats                       422\n5 pigs                        422\n6 poultry (misc)              422\n7 sheep                       422\n8 turkeys                     422\n9 ungulates (mostly horses)   422\n```\n:::\n:::\n\n\nWe are almost done with the data cleaning. At this point I want to create two separate data frames: one that only contains the annual data and one that contains the monthly data. This is easy to do because we can take all the annual data by simply selecting the rows with a missing value in the month column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_annual <- data %>%\n  filter(is.na(month)) %>%\n  select(-month)\n\ndata <- filter(data, !is.na(month))\n```\n:::\n\n\nAs a final step we can combine the year and month into a single column, which will be useful for plotting the data later. This requires a special function from the `zoo` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- mutate(data,\n  month = str_to_sentence(month),\n  month = match(month, month.name),\n  year_month = paste(year, month, \"1\", sep = \"-\"),\n  year_month = lubridate::as_date(year_month),\n  year_month = zoo::as.yearmon(year_month)\n) \n```\n:::\n\n\n## Data analysis\n\nWith the data cleaned up we can start to ask some questions. Let's begin with a graph that shows as much data as possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = year_month, y = count)) +\n  geom_point(size = 1) +\n  geom_line(alpha = .25) +\n  facet_wrap(~ animal, scales = \"free\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 552 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 132 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output-display}\n![](animals-slaughtered-netherlands_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nA few interesting observations:\n\n-   High numbers :(\n\n-   None to few turkeys were slaughtered since around 2005\n\n-   The number of misc. poultry that was slaughtered started to decrease and is around 0 now\n\n-   Relatively few horses are slaughtered (although too many of course)\n\n-   The data fluctuates a bit from month to month\n\nGiven these observations, let's create a subset focusing on the six categories of animals that are still being slaughtered in large numbers and plot the annual data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_annual <- data_annual %>%\n  filter(animal %in% c(\"broilers\", \"goats\", \"sheep\", \"cattle\", \"pigs\", \n    \"chicken (mostly layers)\")\n  ) %>%\n  filter(final == \"yes\")\n\nggplot(data_annual, aes(x = year, y = count)) +\n  geom_point(size = 1) +\n  geom_line(alpha = .25) +\n  facet_wrap(~ animal, scales = \"free\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 22 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output-display}\n![](animals-slaughtered-netherlands_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nOkay, parsing this graph I note that a lot of chicken are slaughtered every year. I also see that some animals are slaughtered more and more over the years, although I'm also surprised to see that for some animals we've had worse years, particularly for cattle and pigs.\n\nLet's create a table of the numbers for the last full year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_annual %>%\n  filter(year == 2021) %>%\n  arrange(desc(count)) %>%\n  select(animal, count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  animal                      count\n  <chr>                       <dbl>\n1 broilers                500732500\n2 chicken (mostly layers)  20079200\n3 pigs                     17236800\n4 cattle                    2093300\n5 sheep                      672400\n6 goats                      218700\n```\n:::\n:::\n\n\nHow many animals is that in total?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_total_2021 <- data_annual %>%\n  filter(year == 2021) %>%\n  summarize(count_total = sum(count))\n```\n:::\n\n\nApparently that's 5.410329\\times 10^{8} animals killed in 2021. That's 17.16 animals per second.\n\n## Conclusion\n\nThat means that about...\n\n::: {#counter}\n:::\n\n...have died since you started reading this blog post.\n",
    "supporting": [
      "animals-slaughtered-netherlands_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}