{
  "hash": "49d574f1ac2858bedae7a23119d73d19",
  "result": {
    "markdown": "---\ntitle: \"Bayesian tutorial: Correlation\"\ndescription: \"The third of a series of tutorial posts on Bayesian analyses. In this post I focus on using `brms` to model a correlation.\"\ndate: 2022-11-24\ncategories:\n  - statistics\n  - tutorial\n  - Bayesian statistics\n  - regression\ncode-fold: true\ncode-tools: true\ntoc: true\ndraft: true\n---\n\n\nIn my previous [blog post](../18-bayesian-tutorial-simple-regression/bayesian-tutorial-simple-regression.qmd), I showed how to use `brms` and `tidybayes` to run a simple regression, i.e., a regression with a single predictor. This analysis required us to set three priors: an intercept prior, a sigma prior, and a slope prior. We can simplify this analysis by turning it into a correlational analysis. This will remove the intercept prior and lets us think about the prior for the slope in as a standardized effect size, i.e., the correlation. \n\nTo run a correlational analysis we'll need to standardize the outcome and predictor variable, so in the code below I run the setup code as usual and also standardize both variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(tidybayes)\n\ndata <- read_csv(\"Howell1.csv\") |>\n  filter(age >= 18) |>\n  mutate(\n    height_z  = (height - mean(height)) / sd(height),\n    weight_z  = (weight - mean(weight)) / sd(weight),\n  )\n\ntheme_set(theme_minimal())\n\ncolors <- c(\"#93CFDB\", \"#1E466E\")\n```\n:::\n\n\nThe formula for our model is slightly different compared to the formula of the previous single-predictor model and that's because we can omit the intercept. By standardizing both the outcome and predictor variables, the intercept is guarenteed to be 0. The regression line always passes through the mean of the predictor and outcome variable. The mean of both is 0 because of the standardization and the intercept is the value the outcome takes when the predictor is 0. We could still include a prior for the intercept and set it to 0 (using `constant(0)`) but we can also simply tell `brms` not to estimate it. The formula syntax then becomes: `height_z ~ 0 + weight_z`.\n\nLet's confirm that this means we only need to set two priors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(height_z ~ 0 + weight_z, data = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                prior class     coef group resp dpar nlpar lb ub       source\n               (flat)     b                                           default\n               (flat)     b weight_z                             (vectorized)\n student_t(3, 0, 2.5) sigma                                 0         default\n```\n:::\n:::\n\n\nIndeed, we're left with a prior for $\\sigma$ and one for `weight_z`, which we can specify either via class `b` or the specific coefficient for `weight_z`. \n\nLet's also write down our model more explicitly, which is the same as the single predictor regression but without the intercept ($\\alpha$).\n$$\\displaylines{heights_i âˆ¼ Normal(\\mu_i, \\sigma) \\\\ \\mu_i = \\beta x_i}$$\n\n## Setting the priors\n\nLet's start with the prior for the slope ($\\beta$). A correlation takes a value that ranges from -1 to 1. If you know absolutely nothing about what kind of correlation to expect, you could set a uniform prior that assign equals probability to every value from -1 to -1. Alternatively, we could use a prior that describes a belief that no correlation is most likely, but with some probability that higher correlations are possible too. This could be done with a normal distribution centered around 0. In the case of this particular model, in which height is regressed onto weight, we can probably expect a sizeable positive correlation. So let's use a skewed normal distribution that puts most of the probability on a positive correlation but is wide enough to allow for a range of correlations, including a negative one. `brms` has the `skew_normal()` function to specify a prior that's a skewed normal distribution. I fiddled around with the numbers a bit and the distribution below is sort of what makes sense to me.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprior <- tibble(r = seq(-1, 1, .01)) %>%\n  mutate(\n    prob = dskew_normal(r, xi = .7, omega = .4, alpha = -3)\n  )\n\nggplot(prior, aes(x = r, y = prob)) + \n  geom_line() +\n  labs(x = \"Slope\", y = \"\")\n```\n\n::: {.cell-output-display}\n![Prior distribution for the correlation](bayesian-tutorial-correlations_files/figure-html/slope-prior-1.png){width=672}\n:::\n:::\n\n\nWhat should the prior for $\\sigma$ be? With the variables standardized, $\\sigma$ is limited to range from 0 to 1. If the predictor explains all the variance of the outcome variable, the residuals will be 0, meaning $\\sigma$ will be 0. If the predictor explains no variance, $\\sigma$ is equal to 1 because it will be similar to the standard deviation of the outcome variable, which is 1 because we've standardized it. Interestingly, this also means that the prior for $\\sigma$ is now dependent on the prior for the slope, because the slope is what determines how much variance is explained in the outcome variable. I don't know exactly how to deal with this dependency, except to fear it and make sure to carefully inspect the output so that we don't have any problems due to incompatible priors. One way to avoid it entirely is to use a uniform prior that assign equal plausibility to each value between 0 and 1, so let's do that.\n\n## Running the model\n\nWith the priors ready, we can run the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- brm(\n  height_z ~ 0 + weight_z,  \n  data = data, \n  family = gaussian,\n  prior = c(\n      prior(uniform(0, 1), class = \"sigma\", ub = 1),\n      prior(\n        skew_normal(.7, .4, -3), \n        class = \"b\", lb = -1, ub = 1\n      )\n    ), \n  sample_prior = TRUE,\n  cores = 4,\n  seed = 4,\n  file = \"models/model.rds\"\n)\n\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: height_z ~ 0 + weight_z \n   Data: data (Number of observations: 352) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n         Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nweight_z     0.74      0.03     0.68     0.81 1.00     3288     2381\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.66      0.03     0.61     0.71 1.00     3152     2533\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\nThe output shows that the estimate for the slope, i.e., the correlation, is 0.74. This is just one number though. Let's visualize the entire distribution, including the prior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraws <- model %>%\n  gather_draws(prior_b, b_weight_z) %>%\n  ungroup() %>%\n  mutate(\n    distribution = if_else(\n      str_detect(.variable, \"prior\"), \"prior\", \"posterior\"\n    ),\n    distribution = fct_relevel(distribution, \"prior\")\n  )\n\nggplot(draws, aes(x = .value, fill = distribution)) +\n  geom_histogram(position = \"identity\", alpha = .85) +\n  labs(x = \"Correlation\", y = \"\", fill = \"Distribution\") +\n  scale_fill_manual(values = colors)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](bayesian-tutorial-correlations_files/figure-html/correlation-1.png){width=672}\n:::\n:::\n\n\nIt looks like we can update towards a higher correlation and also be more certain about it because the range of the posterior is much narrower than that of our prior. \n\nWhat about sigma? Sigma is the standard deviation of the residuals, i.e., that what is unexplained by the predictor. We saw that the correlation between the predictor and outcome is 0.74. Squaring this number gives us the amount of variance explained (0.55), so if we subtract this from 1 we're left with the variance that is unexplained (0.45). Squaring this number to bring it back to a standard deviations gives us 0.67, which matches the estimate for sigma that we saw in the output of `brms`.\n\n## Using a regularizing prior\n\nIn the previous section we used a personal and hopefully informed prior, at least to some degree. What would happen if we instead used a [generic weakly informative prior](https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations)? This is a prior centered at 0 with a standard deviation of 1.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprior <- tibble(r = seq(-1, 1, .01)) %>%\n  mutate(\n    prob = dnorm(r, mean = 0, sd = 1)\n  )\n\nggplot(prior, aes(x = r, y = prob)) + \n  geom_line() +\n  labs(x = \"Slope\", y = \"\")\n```\n\n::: {.cell-output-display}\n![Generic weakly informationve prior for the correlation](bayesian-tutorial-correlations_files/figure-html/weakly-informative-slope-prior-1.png){width=672}\n:::\n:::\n\n\nIt's a very broad prior, ranging from -1 to 1. It is, however, centered at 0 so wouldn't that push the final estimate closer to a null effect? Let's see by running the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_generic_prior <- brm(\n  height_z ~ 0 + weight_z,  \n  data = data, \n  family = gaussian,\n  prior = c(\n      prior(uniform(0, 1), class = \"sigma\", ub = 1),\n      prior(\n        normal(0, 1), \n        class = \"b\", lb = -1, ub = 1\n      )\n    ), \n  sample_prior = TRUE,\n  cores = 4,\n  seed = 4,\n  file = \"models/model_generic_prior_z.rds\"\n)\n\nmodel_generic_prior\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: height_z ~ 0 + weight_z \n   Data: data (Number of observations: 352) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n         Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nweight_z     0.75      0.04     0.69     0.82 1.00     2651     1881\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.66      0.03     0.61     0.71 1.00     2923     2451\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\nThe previous estimate of the correlation was 0.74 and now it's 0.75. Apparently the prior barely had an influence.\n\n\n",
    "supporting": [
      "bayesian-tutorial-correlations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}