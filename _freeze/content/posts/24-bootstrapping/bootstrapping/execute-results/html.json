{
  "hash": "a1cfa5fd03f4de18e3109546df31dc4c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Bootstrapping\ndescription: \"A post on how to obtain p-values through bootstrapping.\"\ndate: 2023-12-25\ncategories:\n  - statistics\n  - bootstrapping\ncode-fold: show\ncode-tools: true\ntoc: true\ntoc-depth: 2\ndraft: true\n---\n\n\n## Setup\n\nRun the following code to get started.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nlibrary(tidyverse)\nlibrary(infer)\n\ntheme_set(theme_minimal())\n```\n:::\n\n\n## One sample t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set parameters\nM <- 1\nSD <- 5\nN <- 100\n\n# Simulate data\nsamples <- mvrnorm(n = N, mu = M, Sigma = SD^2, empirical = TRUE)\ncolnames(samples) <- \"outcome\"\ndata <- as_tibble(samples)\n\n# Run one sample t-test\nt.test(data$outcome)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tOne Sample t-test\n\ndata:  data$outcome\nt = 2, df = 99, p-value = 0.04824\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 0.007891524 1.992108476\nsample estimates:\nmean of x \n        1 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nreps <- 10000\n\nobs_mean <- mean(data$outcome)\n\nnull_dist <- tibble(rep = 1:reps) |>\n  group_by(rep) |>\n  reframe(draw = sample(data$outcome, size = N, replace = TRUE)) |>\n  group_by(rep) |>\n  summarize(null_stat = mean(draw) - obs_mean)\n\np_value <- sum(abs(null_dist$null_stat) >= obs_mean) / reps\np_value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.046\n```\n\n\n:::\n:::\n\n\n## Two sample t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set parameters\nMs <- c(1, 1.25)\nSDs <- c(1, 1)\nn <- 100\n\n# Prepare parameters\nsigma <- matrix(0, nrow = length(SDs), ncol = length(SDs))\ndiag(sigma) <- SDs^2\n\n# Simulate data\nsamples <- mvrnorm(n = n, mu = Ms, Sigma = sigma, empirical = TRUE)\nsamples <- mvrnorm(n = n, mu = Ms, Sigma = sigma, empirical = TRUE)\n\n# Prepare data\ncolnames(samples) <- c(\"control\", \"treatment\")\ndata <- samples |>\n  as_tibble() |>\n  pivot_longer(\n    cols = everything(),\n    names_to = \"condition\",\n    values_to = \"outcome\"\n  ) |>\n  mutate(condition = factor(condition))\n\n# Run one sample t-test\nt.test(outcome ~ condition, data = data, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  outcome by condition\nt = -1.7678, df = 198, p-value = 0.07864\nalternative hypothesis: true difference in means between group control and group treatment is not equal to 0\n95 percent confidence interval:\n -0.52888539  0.02888539\nsample estimates:\n  mean in group control mean in group treatment \n                   1.00                    1.25 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreps <- 1000\n\ndraw <- function(x, size) {\n  sample <- sample(x, size = size, replace = TRUE)\n  sample\n}\n\ndiff <- data |>\n  group_by(condition) |>\n  summarize(mean = mean(outcome)) |>\n  pivot_wider(names_from = condition, values_from = mean) |>\n  mutate(diff = treatment - control) |>\n  pull(diff)\n\nset.seed(1)\n\nnull_dist <- crossing(rep = 1:reps, condition = c(\"control\", \"treatment\")) |>\n  group_by(rep, condition) |>\n  reframe(draw = draw(data$outcome, size = 100)) |>\n  group_by(rep, condition) |>\n  summarize(mean = mean(draw), .groups = \"drop\") |>\n  pivot_wider(names_from = condition, values_from = mean) |>\n  mutate(null_stat = treatment - control)\n\np_value <- sum(abs(null_dist$null_stat) >= diff) / 1000\np_value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.082\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nreps <- 1000\n\nobserved_statistic <- data %>%\n  specify(outcome ~ condition) %>%\n  calculate(stat = \"diff in means\", order = c(\"treatment\", \"control\"))\n\nnull_dist <- data |>\n  specify(outcome ~ condition) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = reps, type = \"bootstrap\") |>\n  calculate(stat = \"diff in means\", order = c(\"treatment\", \"control\"))\n\nnull_dist %>%\n  visualize() +\n  shade_p_value(observed_statistic,\n    direction = \"two-sided\"\n  )\n```\n\n::: {.cell-output-display}\n![](bootstrapping_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nget_p_value(\n  null_dist,\n  obs_stat = observed_statistic,\n  direction = \"two-sided\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.928\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(1)\n\nobserved_statistic <- gss %>%\n  specify(hours ~ college) %>%\n  calculate(stat = \"diff in means\", order = c(\"degree\", \"no degree\"))\n\nobserved_statistic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: hours (numeric)\nExplanatory: college (factor)\n# A tibble: 1 × 1\n   stat\n  <dbl>\n1  1.54\n```\n\n\n:::\n\n```{.r .cell-code}\nnull_dist_2_sample_bootstrap <- gss %>%\n  specify(hours ~ college) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  calculate(stat = \"diff in means\", order = c(\"degree\", \"no degree\"))\n\np_value_2_sample_bootstrap <- null_dist_2_sample_bootstrap %>%\n  get_p_value(\n    obs_stat = observed_statistic,\n    direction = \"two-sided\"\n  )\n\nnull_dist_2_sample_permute <- gss %>%\n  specify(hours ~ college) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\") %>%\n  calculate(stat = \"diff in means\", order = c(\"degree\", \"no degree\"))\n\np_value_2_sample_permute <- null_dist_2_sample_permute %>%\n  get_p_value(\n    obs_stat = observed_statistic,\n    direction = \"two-sided\"\n  )\n\n\np_value_2_sample_bootstrap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.996\n```\n\n\n:::\n\n```{.r .cell-code}\np_value_2_sample_permute\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.244\n```\n\n\n:::\n:::",
    "supporting": [
      "bootstrapping_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}