{
  "hash": "31a8ad55fc5831456026c4fe74aac611",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Obtaining representative estimates\ndescription: \"A post in which I try to figure out some stuff about how to obtain representative estimates from smaller samples.\"\ndate: 2024-02-26\ncategories:\n  - statistics\n  - representativeness\ncode-fold: true\ncode-tools: true\ntoc: true\ntoc-depth: 2\ndraft: true\ndf-print: kable\n---\n\n\nIn survey research it's common to use weights in the data analysis to obtain more representative estimates. In this blog post I work through some simple examples to try and understand how this works and which packages can be used.\n\n## Setup\n\nRun the following code to get started.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nlibrary(survey)\nlibrary(anesrake)\nlibrary(tidyverse)\nlibrary(marginaleffects)\n\ntheme_set(theme_minimal())\n```\n:::\n\n\n## A simple example\n\nLet's begin by creating a simple data set. The goal is to estimate the mean of an outcome variable across two groups. Group A is sampled 1 time and Group B is sampled 2 times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tribble(\n  ~id, ~age, ~outcome,\n  1, \"young\", 4,\n  2, \"old\", 4,\n  3, \"old\", 5\n) |>\n  mutate(age = factor(age))\n\ndata\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| id|age   | outcome|\n|--:|:-----|-------:|\n|  1|young |       4|\n|  2|old   |       4|\n|  3|old   |       5|\n\n</div>\n:::\n:::\n\n\nWe can estimate the mean of the outcome variable using the `lm()` function[^1].\n\n[^1]: We could also use the `mean()` function but we will need `lm()` in the next steps so I'll immediately begin with using `lm()` for consistency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(outcome ~ 1, data = data) |>\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = outcome ~ 1, data = data)\n\nResiduals:\n      1       2       3 \n-0.3333 -0.3333  0.6667 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   4.3333     0.3333      13  0.00587 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5774 on 2 degrees of freedom\n```\n\n\n:::\n:::\n\n\nThis shows a mean of 4.3333. However, group A is sampled only once and group B is sampled twice. If in the population each group is equally common, this means group A is underrepresented.\n\nWe can fix this by counting the observation from group A more and counting the observations from group B less. In other words, we can apply weights to each observation so they match their relative proportion in the population.\n\nIn this case, a weight of 1.5 for the observation of group A and a weight of 0.75 for the observations of group B would do it.\n\nAfter adding the weights we can again use `lm()` to obtain the mean, this time including the weights via the `weight` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- mutate(data, weight = c(1.5, 0.75, 0.75))\n\nlm(outcome ~ 1, data = data, weights = weight) |>\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = outcome ~ 1, data = data, weights = weight)\n\nWeighted Residuals:\n      1       2       3 \n-0.3062 -0.2165  0.6495 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   4.2500     0.3062   13.88  0.00515 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5303 on 2 degrees of freedom\n```\n\n\n:::\n:::\n\n\nNow we get a more representative estimate of 4.25.\n\nWe specified the weights manually, but we can also use an R package to calculate the weights for us. Speci\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninputter <- list(age = c(\"young\" = 0.50, \"old\" = 0.50))\n\nweights <- anesrake(\n  inputter = inputter,\n  dataframe = as.data.frame(data),\n  caseid = data$id\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Raking converged in 3 iterations\"\n```\n\n\n:::\n\n```{.r .cell-code}\nweights$weightvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   1    2    3 \n1.50 0.75 0.75 \n```\n\n\n:::\n:::\n\n\nThis produces the same weights we specified manually previously.\n\n## Another example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parameters\nM_male <- 5\nM_female <- 4\nSD <- 2\nN_male <- 400\nN_female <- 600\n\n# Simulate\nsamples_male <- mvrnorm(\n  n = N_male,\n  mu = M_male,\n  Sigma = SD^2,\n  empirical = TRUE\n)\n\nsamples_female <- mvrnorm(\n  n = N_female,\n  mu = M_female,\n  Sigma = SD^2,\n  empirical = TRUE\n)\n\n# Prepare data\ncolnames(samples_male) <- c(\"outcome\")\ncolnames(samples_female) <- c(\"outcome\")\n\ndata_male <- samples_male |>\n  as_tibble() |>\n  mutate(sex = \"male\")\ndata_female <- samples_female |>\n  as_tibble() |>\n  mutate(sex = \"female\")\n\ndata <- bind_rows(data_male, data_female) |>\n  mutate(\n    id = 1:n(),\n    sex = factor(sex)\n  )\n\ninputter <- list(\n  sex = c(\n    \"male\" = 0.50,\n    \"female\" = 0.50\n  )\n)\n\nweights <- anesrake(\n  inputter = inputter,\n  dataframe = as.data.frame(data),\n  caseid = data$id\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Raking converged in 8 iterations\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$convergence\n[1] \"Complete convergence was achieved after 8 iterations\"\n\n$base.weights\n[1] \"No Base Weights Were Used\"\n\n$raking.variables\n[1] \"sex\"\n\n$weight.summary\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.8333  0.8333  0.8333  1.0000  1.2500  1.2500 \n\n$selection.method\n[1] \"variable selection conducted using _pctlim_ - discrepancies selected using _total_.\"\n\n$general.design.effect\n[1] 1.041667\n\n$sex\n       Target Unweighted N Unweighted % Wtd N Wtd % Change in %  Resid. Disc.\nfemale    0.5          600          0.6   500   0.5        -0.1  1.110223e-16\nmale      0.5          400          0.4   500   0.5         0.1 -1.110223e-16\nTotal     1.0         1000          1.0  1000   1.0         0.2  2.220446e-16\n       Orig. Disc.\nfemale        -0.1\nmale           0.1\nTotal          0.2\n```\n\n\n:::\n\n```{.r .cell-code}\ndata <- mutate(data, weight = weights$weightvec)\n\nlm(outcome ~ 1, data = data) |>\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = outcome ~ 1, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.9579 -1.3626  0.0029  1.2976  7.3851 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  4.40000    0.06509    67.6   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.058 on 999 degrees of freedom\n```\n\n\n:::\n\n```{.r .cell-code}\nlm(outcome ~ 1, data = data, weights = weight) |>\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = outcome ~ 1, data = data, weights = weight)\n\nWeighted Residuals:\n    Min      1Q  Median      3Q     Max \n-6.3430 -1.3591 -0.0886  1.2491  8.1450 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  4.50000    0.06516   69.06   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.061 on 999 degrees of freedom\n```\n\n\n:::\n\n```{.r .cell-code}\nlm(outcome ~ 1, data = data) |>\n  predictions(newdata = datagrid())\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| rowid| estimate| std.error| statistic| p.value| s.value| conf.low| conf.high| outcome|\n|-----:|--------:|---------:|---------:|-------:|-------:|--------:|---------:|-------:|\n|     1|      4.4| 0.0650864|  67.60247|       0|     Inf| 4.272433|  4.527567|     4.4|\n\n</div>\n:::\n\n```{.r .cell-code}\nlm(outcome ~ 1, data = data, weights = weight) |>\n  predictions(newdata = datagrid())\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| rowid| estimate| std.error| statistic| p.value| s.value| conf.low| conf.high| outcome| weight|\n|-----:|--------:|---------:|---------:|-------:|-------:|--------:|---------:|-------:|------:|\n|     1|      4.5| 0.0651607|  69.06007|       0|     Inf| 4.372287|  4.627713|     4.4|      1|\n\n</div>\n:::\n\n```{.r .cell-code}\nlm(outcome ~ 1 + sex, data = data) |>\n  avg_predictions(newdata = datagrid(sex = unique))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| estimate| std.error| statistic| p.value| s.value| conf.low| conf.high|\n|--------:|---------:|---------:|-------:|-------:|--------:|---------:|\n|      4.5| 0.0645497|   69.7137|       0|     Inf| 4.373485|  4.626515|\n\n</div>\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tribble(\n  ~id, ~sex,     ~outcome,\n  1,   \"male\",   1,\n  2,   \"male\",   2,\n  5,   \"female\", 2,\n  6,   \"female\", 4,\n  7,   \"female\", 2\n)\n\ndata <- mutate(data, sex = factor(sex), pop = 2000)\n\ndesign <- svydesign(id = ~0, data = data, fpc = ~pop)\nsvymean(~outcome, design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mean     SE\noutcome  2.2 0.4893\n```\n\n\n:::\n\n```{.r .cell-code}\npop_sex <- data.frame(\n  sex = c(\"male\", \"female\"),\n  Freq = c(1000, 1000)\n)\n\nrake <- rake(\n  design,\n  list(~sex),\n  list(pop_sex),\n)\n\nsvymean(~outcome, rake)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean     SE\noutcome 2.0833 0.3624\n```\n\n\n:::\n:::\n",
    "supporting": [
      "representativeness_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}