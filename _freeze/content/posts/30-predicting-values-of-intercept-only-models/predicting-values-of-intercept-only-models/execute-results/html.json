{
  "hash": "e96ddacc1b56749b8f37e9ff354108ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predicting values of intercept only models\"\ndescription: \"A post on how to predict values of intercept-only models.\"\ndate: 2024-03-18\ncategories:\n  - statistics\n  - prediction\ncode-fold: show\ncode-tools: true\ntoc: true\ndf-print: kable\n---\n\n\nI frequently need to calculate a single proportion or single mean with confidence intervals. My preferred way for getting these is to run intercept-only models, such as a logistic regression for proportions and standard regression for means. In this post I show to run these models and obtain the estimates with confidence intervals, using the same workflow from my tutorial blog posts. \n\nRun the following setup code if you want to follow along.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(marginaleffects)\nlibrary(brms)\nlibrary(tidybayes)\nlibrary(modelr)\n\noptions(\n  mc.cores = 4,\n  brms.threads = 4,\n  brms.backend = \"cmdstanr\",\n  brms.file_refit = \"on_change\"\n)\n```\n:::\n\n\n## Data\n\nI found some survey [data](https://doi.org/10.17026/dans-x2z-n2bh) including a question about whether the respondent follows a vegan diet. The relevant column is called `vegan` and contains a 1 for 'Yes' and a 0 for \"No\". With this data we can determine the proportion of vegans and the associated confidence interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"data.csv\")\nhead(data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|     id|date       | vegan|\n|------:|:----------|-----:|\n| 800009|02-07-2018 |     0|\n| 800015|02-07-2018 |     0|\n| 800054|02-07-2018 |     0|\n| 800057|04-07-2018 |     0|\n| 800073|03-07-2018 |     0|\n| 800085|03-07-2018 |     0|\n\n</div>\n:::\n:::\n\n\n## Frequentist\n\nMy frequentist approach consists of running a logistic regression using the `glm()` function. The outcome variable is the `vegan` column and there are no predictors; only an intercept.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- glm(vegan ~ 1, family = binomial(), data = data)\n```\n:::\n\n\nWe can use the `predictions()` function from the [marginaleffects](https://marginaleffects.com) package to obtain the proportion. By default, this function calculates the regression-adjusted predicted values for every observation in the original dataset. That's not what we want; we want only one prediction. We can specify what we want to calculate predictors for using the `newdata` argument. My preferred way for specifying predictor values is using helper functions like `datagrid()`. With this function you can specify which predictors you want to include and for which values of each predictor you want to calculate predictions. The problem is that we don't have any predictors, so what to specify? If we use the `datagrid()` function from marginaleffects, the answer is nothing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(model, newdata = datagrid())\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| rowid|  estimate| p.value|  s.value|  conf.low| conf.high|     vegan|\n|-----:|---------:|-------:|--------:|---------:|---------:|---------:|\n|     1| 0.0120167|       0| 961.5991| 0.0095016| 0.0151874| 0.0120167|\n\n</div>\n:::\n:::\n\n\nThis gives us the estimate of interest, as well as a 95% confidence interval.\n\n## Bayesian\n\nNow let's do the same thing but using a Bayesian approach, without using the marginaleffects package. Below we run a model using the `brm()` function from [brms](https://paul-buerkner.github.io/brms/). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- brm(\n  vegan ~ 1,\n  family = bernoulli(link = \"logit\"),\n  data = data,\n  prior = prior(student_t(5, 0, 1.5), class = \"Intercept\"),\n  file = \"models/model.rds\",\n  silent = 2\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Rows containing NAs were excluded from the model.\n```\n\n\n:::\n:::\n\n\nTo get predicted values, I'll use the `data_grid()` fuction from the [modelr](https://modelr.tidyverse.org) package and the `add_epred_draws()` and `median_qi()` functions from the [tidybayes](http://mjskay.github.io/tidybayes/) package. The logic is to specify a data frame using `data_grid()` with predictor values and then add predicted values using `add_epred_draws()` to this data frame, which are then summarized using `median_qi()`. However, if we run the following code, we get an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grid() |>\n  add_epred_draws(model) |>\n  median_qi()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `data_grid()`:\n! Must supply at least one of `...` and `.model`\n```\n\n\n:::\n:::\n\n\nThat's because the function `data_grid()` can't be empty. Using `datagrid()` from the marginaleffects package also wouldn't work.\n\nTo fix the error, we need to specify the model using the `.model` argument of the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_grid(.model = model) |>\n  add_epred_draws(model) |>\n  median_qi()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| .row|    .epred|    .lower|    .upper| .width|.point |.interval |\n|----:|---------:|---------:|---------:|------:|:------|:---------|\n|    1| 0.0121273| 0.0095111| 0.0151626|   0.95|median |qi        |\n\n</div>\n:::\n:::\n\n\nThat works.\n\nWe could also create the data frame ourselves without using `data_grid()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(.rows = 1) |>\n  add_epred_draws(model) |>\n  median_qi()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| .row|    .epred|    .lower|    .upper| .width|.point |.interval |\n|----:|---------:|---------:|---------:|------:|:------|:---------|\n|    1| 0.0121273| 0.0095111| 0.0151626|   0.95|median |qi        |\n\n</div>\n:::\n:::\n\n\nBut it looks weird to me to create a data frame with 1 row and no values in it (although technically that's what the data grid functions also do).\n\n## Summary\n\nYou can run intercept-only regression models to obtain estimates of single proportions or means. These estimates, together with their confidence intervals, can be obtained using prediction functions and telling them to predict values from empty data frames, which can be created using helper functions like `datagrid()` from the marginaleffects package and `data_grid()` from the modelr package.\n\n*This post was last updated on 2024-03-18.*",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}