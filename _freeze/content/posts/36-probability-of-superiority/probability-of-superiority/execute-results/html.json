{
  "hash": "ff5a37af88962ed0bedee5dc4cfa5cff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Probability of superiority\"\ndate: 2024-03-20\ncategories:\n  - statistics\n  - effect size\n  - probability of superiority\ncode-tools: true\ncode-fold: show\ndraft: true\n---\n\n\nRun the following setup code if you want to follow along.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(effectsize)\nlibrary(RProbSup)\nlibrary(brms)\nlibrary(tidybayes)\n\ndata <- read_csv(\"data.csv\")\ndata <- drop_na(data)\n\noptions(\n  mc.cores = 4,\n  brms.threads = 4,\n  brms.backend = \"cmdstanr\",\n  brms.file_refit = \"on_change\"\n)\n```\n:::\n\n\n## Manually calculating PSup\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(2, 3, 4, 5, 6)\nb <- c(1, 2, 3, 4, 5)\n\nn <- length(a)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nouter(a, b, \">\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] TRUE FALSE FALSE FALSE FALSE\n[2,] TRUE  TRUE FALSE FALSE FALSE\n[3,] TRUE  TRUE  TRUE FALSE FALSE\n[4,] TRUE  TRUE  TRUE  TRUE FALSE\n[5,] TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\nThe output is a matrix with the results of a comparison between each element of `a` and `b`. For example, the result in row 1 and column 1 is `TRUE`, indicating that the first element of `a` (2) is larger than the first element of `b` (1). Another example, the result in row 1 column 2 is `FALSE` because the second element of `b` (2) is not larger than the first element of `a` (2), it's a tie.\n\nNext, we need to count the number of times that an element in `a` is larger than an element in `b`. This is easily done by using `sum()` on the matrix. This works because `TRUE`s are treated as 1 and `FALSE`s as 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(outer(a, b, \">\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\nIt's possible that two elements are tied (i.e., have the exact same value). To deal with this, we count the number of times this happens and divide the sum by 2, thereby saying that ties are treated as one value being larger than the other half the time.\n\nBoth of the sums are summed together, giving us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(sum(outer(a, b, \">\")) + 0.5 * sum(outer(a, b, \"==\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\nThis is actually the same thing as the Wilcoxon (or Mann-Whitney) test statistic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwilcox.test(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  a and b\nW = 17, p-value = 0.3976\nalternative hypothesis: true location shift is not equal to 0\n```\n\n\n:::\n:::\n\n\nDividing this number by the total number of comparisons gives us the probability of superiority.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(sum(outer(a, b, \">\")) + 0.5 * sum(outer(a, b, \"==\"))) / (n * n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.68\n```\n\n\n:::\n:::\n\n\nLet's turn this into a function and then compare the result to what we get when we use some ready-made functions from various packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_sup <- function(a, b) {\n  # Count number of times a > b\n  sum <- sum(outer(a, b, \">\"))\n\n  # Count ties, counting each tie as a half\n  ties <- sum(outer(a, b, \"==\")) * 0.5\n\n  # Sum both and divide by total number of comparisons\n  p_sup <- (sum + ties) / (length(a) * length(b))\n\n  return(p_sup)\n}\n\ndf <- cbind(c(a, b), c(rep(\"a\", 5), rep(\"b\", 5)))\n\ntribble(\n  ~package, ~code, ~p_sup,\n  \"-\", \"p_sup(a, b)\", p_sup(a, b),\n  \"effectsize\",\n  \"p_superiority(a, b, parametric = FALSE)\",\n  p_superiority(a, b, parametric = FALSE)$p_superiority,\n  \"RProbSup\", \"A(df, 1, 2)\", A(df, 1, 2)$A\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  package    code                                    p_sup\n  <chr>      <chr>                                   <dbl>\n1 -          p_sup(a, b)                              0.68\n2 effectsize p_superiority(a, b, parametric = FALSE)  0.68\n3 RProbSup   A(df, 1, 2)                              0.68\n```\n\n\n:::\n:::\n\n\n## A Frequentist example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprops <- data |>\n  group_by(sex) |>\n  count(importance_animal_rights) |>\n  mutate(prop = n / sum(n))\n\nggplot(props, aes(x = importance_animal_rights, y = prop, fill = sex)) +\n  geom_col(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](probability-of-superiority_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_superiority(importance_animal_rights ~ sex, data = data, parametric = FALSE)$p_superiority\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5849741\n```\n\n\n:::\n\n```{.r .cell-code}\np_sup(\n  pull(filter(data, sex == \"Female\"), importance_animal_rights),\n  pull(filter(data, sex == \"Male\"), importance_animal_rights)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5849741\n```\n\n\n:::\n:::\n\n\n## A Bayesian example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- brm(\n  importance_animal_rights ~ sex,\n  data = data, file = \"model.Rds\"\n)\n\ndraws <- data |>\n  add_predicted_draws(model, value = \"predicted_outcome\")\n\np_sups <- draws |>\n  group_by(.draw) |>\n  summarize(\n    p_sup = p_superiority(\n      predicted_outcome ~ sex,\n      parametric = FALSE\n    )$p_superiority\n  )\n\nmedian_qi(p_sups, p_sup)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  p_sup .lower .upper .width .point .interval\n  <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n1 0.589  0.568  0.609   0.95 median qi       \n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(p_sups, aes(x = p_sup)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](probability-of-superiority_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "probability-of-superiority_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}