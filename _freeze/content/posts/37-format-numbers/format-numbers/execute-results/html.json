{
  "hash": "9d4678ed1c5692653f239aa21b558aaa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Formatting numbers\"\ndescription: \"A showcase of the function I use to format numbers.\"\ndate: 2024-05-14\ncategories:\n  - R\n  - function\n  - statistics\ncode-tools: true\ncode-fold: show\ndraft: true\n---\n\n\nRun the following setup code if you want to follow along.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gt)\n```\n:::\n\n\n## The function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_number <- function(\n    x,\n    trailing_digits = 2,\n    digits = NULL,\n    omit_zero = FALSE) {\n  # Convert the number to a string to use regex to extract different parts\n  # of the number (e.g., decimals)\n  string <- as.character(x)\n\n  # Extract and count decimals\n  decimals <- stringr::str_extract(string, \"(?<=\\\\.).+\")\n  decimals_n <- dplyr::if_else(is.na(decimals), 0, stringr::str_length(decimals))\n\n  # Count number of leading zeroes in the decimals\n  zeroes <- stringr::str_extract(string, \"(?<=\\\\.)0+\")\n  zeroes_n <- dplyr::if_else(is.na(zeroes), 0, stringr::str_length(zeroes))\n\n  # If digits are set, it overrules trailing digits\n  if (!is.null(digits)) {\n    output <- format(round(x, digits), nsmall = digits)\n  } else {\n    trailing_digits <- ifelse(decimals_n > trailing_digits, trailing_digits + zeroes_n, trailing_digits)\n    output <- formatC(\n      round(x, digits = trailing_digits),\n      digits = trailing_digits, format = \"f\"\n    )\n  }\n\n  # Remove leading zero\n  if (omit_zero) output <- stringr::str_remove(output, \"^0\")\n\n  return(output)\n}\n```\n:::\n\n\n## Testing it out\n\n| Number      | `trailing_digits` | `digits` | `omit_zero` | Result                                                           |\n|---------------|---------------|---------------|---------------|---------------|\n| 2           | 0                 | \\-       | `FALSE`     | 2                        |\n| 2           | 2                 | \\-       | `FALSE`     | 2.00                        |\n| 2           | \\-                | 2        | `FALSE`     | 2.00                                 |\n| 2.0         | 2                 | \\-       | `FALSE`     | 2.00                      |\n| 2.01        | 1                 | \\-       | `FALSE`     | 2.01                     |\n| 2.01        | -                 | 1        | `FALSE`     | 2.0                              |\n| 2.01        | 2                 | \\-       | `FALSE`     | 2.01                     |\n| 2.013232    | 2                 | \\-       | `FALSE`     | 2.013                 |\n| 12.00013232 | 2                 | \\-       | `FALSE`     | 12.00013              |\n| 12.01003232 | 2                 | \\-       | `FALSE`     | 12.010              |\n| 12.00120032 | 2                 | \\-       | `FALSE`     | 12.0012              |\n| 0.434       | 2                 | \\-       | `TRUE`      | .43  |\n| 1.434       | 2                 | \\-       | `FALSE`     | 0.43 |",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}