{
  "hash": "894d11e366668341ee23c0598a45b7e7",
  "result": {
    "markdown": "---\ntitle: My Bayesian Workflow + Tutorial\ndescription: \"Bayesian statistics seems pretty cool, but I don't really know how to apply it yet. In this blog post, I try to setup a Bayesian workflow that teaches both you and me how to do it.\"\ndate: 2020-12-08\ncategories:\n  - statistics\n  - tutorial\n  - Bayesian statistics\n  - regression\ncode-fold: true\ncode-tools: true\ntoc: true\nformat: \n   html:\n     df-print: kable\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(brms)\nlibrary(tidybayes)\n\n# Load data\ndata <- read_csv(\"Howell1.csv\")\n\n# Set seed\nset.seed(4)\n\n# Set options\ntheme_set(theme_minimal())\n```\n:::\n\n\nThis post is about developing a workflow that I think makes sense for analyzing data using Bayesian statistics.\n\nThe data we will use to play with is the same data Richard McElreath uses in Chapter 4 of his amazing book called [Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/ \"Statistical Rethinking website\"). The data contains partial census data of the !Kung San, compiled from interviews conducted by Nancy Howell in the late 1960s. Just like in the book, we will focus only on people 18 years or older.\n\n\n::: {.cell tbl-cap='Partial census data for the Dobe area !Kung San compiled by Nancy Howell in the late 1960s.'}\n\n```{.r .cell-code}\n# Only select people older than 18\ndata <- filter(data, age >= 18)\n\n# Show the first rows\nhead(data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  height|   weight| age| male|\n|-------:|--------:|---:|----:|\n| 151.765| 47.82561|  63|    1|\n| 139.700| 36.48581|  63|    0|\n| 136.525| 31.86484|  65|    0|\n| 156.845| 53.04191|  41|    1|\n| 145.415| 41.27687|  51|    0|\n| 163.830| 62.99259|  35|    1|\n\n</div>\n:::\n:::\n\n\nThe general idea behind Bayesian statistics is that you start with some prior beliefs about the parameters of interest and then update those beliefs with the data. Note that this doesn't mean that you have to personally accept those beliefs. You could simply postulate a belief to serve a particular purpose, such as assuming that a null effect is most likely even though you personally believe that there should be an effect. It does mean that when we want to analyze the data, we should start with defining our beliefs, rather than immediately jumping into running an analysis.\n\nLet's focus our first question on the heights in the data. We should begin by defining a belief that describes the different heights, which is based on our a priori knowledge of the heights of the Dobe area !Kung San. In other words, we have to describe what we believe their heights to be. This is unlike what you have to do with frequentist statistics, so this part might be a bit tricky.\n\nTo make it easier, we will use the amazing `brms` package to both define and inspect our beliefs, as well as use the data to update those beliefs.\n\n## An intercept-only model\n\nLet's start with a simple intercept-only model to model people's heights. The formula for this model is: `height ~ 1`.\n\nWith this formula and the data we can use `brms` to figure out which priors (i.e., beliefs) we need to set by running the `get_prior()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(height ~ 1, data = data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|prior                    |class     |coef |group |resp |dpar |nlpar |lb |ub |source  |\n|:------------------------|:---------|:----|:-----|:----|:----|:-----|:--|:--|:-------|\n|student_t(3, 154.3, 8.5) |Intercept |     |      |     |     |      |   |   |default |\n|student_t(3, 0, 8.5)     |sigma     |     |      |     |     |      |0  |   |default |\n\n</div>\n:::\n:::\n\n\nThis shows us that we need to set two priors, one for the Intercept and one for sigma. `brms` determined these priors automatically, but let's take a look at them and see if they make sense to us.\n\n### The Intercept prior\n\nThe prior for the intercept indicates what we believe the *average* height to be.\n\n`brms` has set the default Intercept prior as a Student *t* distribution with 3 degrees of freedom, a $\\mu$ of 154.3 and a $\\sigma$ of 8.5. That means `brms` starts off with a 'belief' that the average height is roughly normally distributed, with the most common average height being 154.3, but with quite some uncertainty. In fact, a Student *t* distribution has thicker tails compared to a normal distribution, which means more uncertainty. With these values you think the average height is most likely to be 154.3, you also think quite some other values are possible, even much smaller or much taller average heights.\n\nBut this is the default prior. `brms` determines this automatic prior by peeking at the data, which is not what we want to do. Instead, we should create our own.\n\nSo what do I believe the average height to be? As a Dutch person, I might be under the impression that the average height is around 175 centimeters. This is probably too tall to use as an average for the heights because we're known for being quite tall. So I think the average should be a bit lower than 175, perhaps 170. I am not very sure, though. After all, I am far from an expert on people's heights; I am only using my layman knowledge here. As a result, an average of 165 seems possible to me too. So let's describe my belief in the form of a distribution in which multiple averages are possible, to varying extents. We could use different types of distributions for this purpose. We could use a Student *t* distribution, but we can also use a normal distribution. We should use a Student *t* distribution with small degrees of freedom if we want to allow for the possibility of being very wrong (remember, it has thicker tails, so it covers a wider range of average heights). We're not super uncertain about people's heights, though, so let's use a normal distribution.\n\nDefining a normal distribution requires that we set the $\\mu$ and the $\\sigma$. The $\\mu$ we already covered (i.e., 170), so that leaves $\\sigma$. Let's set this to 10 and see what happens by visualizing this prior. Below I plot both the default `brms` prior and our own.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_prior_intercept <- tibble(\n  height_mean = seq(from = 100, to = 250, by = 0.1),\n  ours = dnorm(height_mean, mean = 170, sd = 10),\n  default = dstudent_t(height_mean, df = 30, mu = 154.3, sigma = 8.5),\n)\n\nheight_prior_intercept <- pivot_longer(\n  height_prior_intercept, \n  cols = -height_mean, \n  names_to = \"prior\"\n) \n\nggplot(\n    height_prior_intercept, \n    aes(x = height_mean, y = value, linetype = fct_rev(prior))\n  ) +\n  geom_line() +\n  labs(x = \"Average height\", y = \"\", linetype = \"Prior\") +\n  scale_x_continuous(breaks = seq(100, 250, 20))\n```\n\n::: {.cell-output-display}\n![Two priors for $\\mu$\\ - brms' default and my own](my-bayesian-workflow-and-tutorial_files/figure-html/height-mu-prior-1.png){width=672}\n:::\n:::\n\n\nOur prior indicates that we believe the average height to be higher than the default prior. In terms of the standard deviation, we both seem to be about equally uncertain about this average. To be fair, I think this prior of ours is not very plausible. Apparently we assign quite a chunk of plausibility to an average of 180 cm, or even 190 cm, which is unlikely. An average of 160 cm is more plausible to me than an average of 180, so I should probably lower the mu, or use more of a skewed distribution. Regardless, we can keep it like this. We'll see later that our data easily overshadows our prior.\n\n### The sigma prior\n\nWhat about the standard deviation? I find setting the standard deviation of the distribution of heights (not the mean of the heights) quite difficult. There are parts that are easy, such as the fact that the standard deviation has to be 0 or larger (it can't be negative), but exactly how large it should be, I don't know.\n\nI do know it is unlikely to be close to 0, and unlikely to be very large. That's because I know people's heights do vary, so it's not likely that it is close 0. I also know it's not super large because we don't see people who are taller than 2 meters very often. This means the peak should be somewhere above 0, with a tail to allow higher values but not too high. We can use a normal distribution for this with a mean above 0 and a particular standard deviation, and ignore everything that's smaller than 0.\n\nAs I mentioned before, there is a downside of using a normal distribution, though. Normal distributions have long tails, but there is actually very little density in those tails. If we are quite uncertain about our belief about sigma, we should have thicker tails to indicate we believe those values are more plausible. One way to do this is by using a cauchy distribution. Cauchy distributions are like normal distributions, but with thicker tails. In fact, the cauchy distribution is a special case of the Student *t* distribution; they are equivalent if the degree of freedom is 1.\n\nThe cauchy distribution also requires two parameters: $\\mu$ and $\\sigma$. I set $\\mu$ to 5 and $\\sigma$ to 5 as well. Below I plot this prior and `brms`'s default prior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight_prior_sigma <- tibble(\n  height_sigma = seq(from = 0, to = 50, by = .1),\n  default = dstudent_t(height_sigma, df = 3, mu = 0, sigma = 8.5) * 2,\n  ours = dstudent_t(height_sigma, df = 1, mu = 5, sigma = 5) * 2\n)\n\nheight_prior_sigma <- pivot_longer(\n  height_prior_sigma, \n  cols = -height_sigma, \n  names_to = \"prior\"\n)\n\nggplot(\n    height_prior_sigma, \n    aes(x = height_sigma, y = value, linetype = fct_rev(prior))\n  ) +\n  geom_line() +\n  labs(x = \"Standard deviation of heights\", y = \"\", linetype = \"Prior\")\n```\n\n::: {.cell-output-display}\n![Two priors for $\\sigma$ - brms' default and my own](my-bayesian-workflow-and-tutorial_files/figure-html/height-sigma-prior-1.png){width=672}\n:::\n:::\n\n\nAs you can see, both distributions have long tails, allowing for the possibility of high standard deviations. There are some notable differences between the two priors. Our prior puts more weight on a standard deviation larger than 0, while the default prior believes a standard deviation of 0 is most likely. However, both priors are quite weak. We'll see that the data easily overshadows these priors.\n\nBefore we run the analysis, we can also check the results of both our priors on the distribution of heights.\n\n### A prior predictive check\n\nBefore we run our model, we should check what the effect is of both priors combined. Because we have set the priors we can simulate what we believe the data to be. This is one way to see whether our priors actually make sense. It is called a prior predictive check.\n\nWe can use `brms` to do this by running the `brm()` function. However, instead of running the actual model, we tell it to only sample from the prior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height_prior <- brm(\n  height ~ 1,  \n  data = data, \n  family = gaussian,\n  prior = c(\n      prior(normal(170, 10), class = \"Intercept\"),\n      prior(cauchy(5, 5), class = \"sigma\")\n    ), \n  cores = 4,\n  seed = 4, \n  sample_prior = \"only\",\n  file = \"models/model_height_prior.rds\"\n)\n```\n:::\n\n\nWe then use the `tidybayes` package to draw samples from the prior and plot these draws.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions_prior <- tibble(distribution = \"prior\")\n\npredictions_prior <- add_predicted_draws(\n  newdata = predictions_prior, \n  object = model_height_prior, \n  value = \"predicted_height\"\n)\n\nggplot(predictions_prior, aes(x = predicted_height)) +\n  geom_histogram(binwidth = 5, alpha = .85) +\n  coord_cartesian(xlim = c(100, 250)) +\n  labs(x = \"Height\", y = \"\")\n```\n\n::: {.cell-output-display}\n![Prior predictive check](my-bayesian-workflow-and-tutorial_files/figure-html/prior-predictive-1.png){width=672}\n:::\n:::\n\n\nSo, our priors result in a normal distribution of heights ranging from about 125 cm to 225 cm. That is probably a bit too wide, but let's go with this. Let's run the model for real now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height <- brm(data = data, \n  family = gaussian,\n  height ~ 1,\n  prior = c(\n    prior(normal(170, 10), class = \"Intercept\"),\n    prior(cauchy(5, 1), class = \"sigma\")\n  ),\n  cores = 4,\n  seed = 4,\n  sample_prior = TRUE,\n  file = \"models/model_height.rds\"\n)\n```\n:::\n\n\nBefore we check the results, let's first check whether the chains look good.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model_height)\n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/chains-1.png){width=672}\n:::\n:::\n\n\nIt seems like they do. The distributions look normal and the chains look like caterpillars, which means they're sampling from the distribution space and that's what we want. This also shows us the posterior distributions of the two parameters, but let's create our own graphs that compare both the prior and posterior distributions.\n\n\n::: {.cell fig.cap-='Prior vs. posterior for $\\mu$'}\n\n```{.r .cell-code}\nresults <- model_height %>%\n  gather_draws(b_Intercept, sigma, prior_Intercept, prior_sigma) %>%\n  ungroup() %>%\n  mutate(\n    parameter = if_else(str_detect(.variable, \"sigma\"), \"sigma\", \"intercept\"),\n    distribution = if_else(str_detect(.variable, \"prior\"), \"prior\", \"posterior\")\n  )\n\nresults_intercept <- filter(results, parameter == \"intercept\")\nresults_sigma <- filter(results, parameter == \"sigma\")\n\nggplot(results_intercept, aes(x = .value, fill = fct_rev(distribution))) +\n  geom_histogram(binwidth = 1, position = \"identity\", alpha = .85) +\n  coord_cartesian(xlim = c(145, 195)) +\n  labs(x = \"Average height\", y = \"\", fill = \"Distribution\") +\n  scale_fill_viridis(option = \"mako\", discrete = TRUE, begin = .25, end = .75)\n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/prior-posterior-mu-1.png){width=672}\n:::\n:::\n\n\nHere we see that the posterior distribution of average heights is now much more narrow and centered around 156 cm.\n\n\n::: {.cell fig.cap-='Prior vs. posterior for $\\sigma$'}\n\n```{.r .cell-code}\nggplot(results_sigma, aes(x = .value, fill = fct_rev(distribution))) +\n  geom_histogram(binwidth = 0.25, position = \"identity\", alpha = .85) + \n  coord_cartesian(xlim = c(0, 25)) +\n  labs(x = \"Height standard deviation\", y = \"\", fill = \"Distribution\") +\n  scale_fill_viridis(option = \"mako\", discrete = TRUE, begin = .25, end = .75)\n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/prior-posterior-sigma-1.png){width=672}\n:::\n:::\n\n\nSimilarly, we see that the posterior for sigma is also much more narrow and around 7.75.\n\nWe can call up the estimates and the 95% confidence intervals by printing the model object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: height ~ 1 \n   Data: data (Number of observations: 352) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept   154.63      0.41   153.83   155.40 1.01     3354     2418\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     7.72      0.29     7.18     8.32 1.00     3632     2741\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\nOur final step is to visualize the posterior distribution of all heights and compare it the distribution of heights based on our priors (the prior predictive check).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions_posterior <- tibble(distribution = \"posterior\")\n\npredictions_posterior <- add_predicted_draws(\n  newdata = predictions_posterior,\n  object = model_height, \n  value = \"predicted_height\"\n)\n\npredictions <- bind_rows(predictions_prior, predictions_posterior)\n\nggplot(predictions, aes(x = predicted_height, fill = distribution)) +\n  geom_histogram(binwidth = 1, alpha = .85) +\n  coord_cartesian(xlim = c(100, 250)) +\n  labs(x = \"Height\", y = \"\", fill = \"Distribution\") +\n  scale_fill_viridis(option = \"mako\", discrete = TRUE, begin = .25, end = .75)\n```\n\n::: {.cell-output-display}\n![Prior and posterior predictive check](my-bayesian-workflow-and-tutorial_files/figure-html/prior-posterior-predictive-check-1.png){width=672}\n:::\n:::\n\n\nBased on the data, we should now believe, after seeing the data, that people's heights are lower than expected.\n\n## Adding a predictor\n\nLet's repeat the same steps but this time we add a predictor to the model. We'll add weight as a predictor to see its relationship with height.\n\nThe formula becomes: `height ~ 1 + weight`.\n\nSo let's see which priors we need to set for this model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(height ~ 1 + weight, data = data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|prior                    |class     |coef   |group |resp |dpar |nlpar |lb |ub |source  |\n|:------------------------|:---------|:------|:-----|:----|:----|:-----|:--|:--|:-------|\n|                         |b         |       |      |     |     |      |   |   |default |\n|                         |b         |weight |      |     |     |      |   |   |default |\n|student_t(3, 154.3, 8.5) |Intercept |       |      |     |     |      |   |   |default |\n|student_t(3, 0, 8.5)     |sigma     |       |      |     |     |      |0  |   |default |\n\n</div>\n:::\n:::\n\n\nThis time the output is a bit more confusing. We seem to have two additional priors: a default b prior and a vectorized b prior for the weight coefficient. The reason there are now two additional priors is that there are two different ways to specify a prior here. We can either set a specific prior for the weight coefficient, or set a prior on all the b-class priors. In this specific case, with only one additional predictor, it means we can use either technique and we only need to set one of them.\n\nWhat should our prior for weight be? In other words, for every increase of 1 in weight, how much do we think this relates to an increase (or decrease) in height? This is likely to be a positive relationship (taller people are more likely to be heavier as well), but we can also refrain from indicating the direction. This means we can specify a distribution of possible effects, centered around 0. The only decision we're left with is setting the standard deviation. Let's try a value of 10 and see what this means.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height_weight_prior <- brm(\n  height ~ 1 + weight,  \n  data = data, \n  family = gaussian,\n  prior = c(\n      prior(normal(170, 10), class = \"Intercept\"),\n      prior(cauchy(5, 1), class = \"sigma\"),\n      prior(normal(0, 10), coef = \"weight\")\n    ),\n  cores = 4,\n  seed = 4, \n  sample_prior = \"only\",\n  file = \"models/model_height_weight_prior.rds\"\n)\n```\n:::\n\n\nWe can do our prior predictive checking in two different ways now. We can check only the effect of our prior on weight, or also include the prior on sigma.\n\nIn the former case, we use `fitted_draws()` to obtain draws from our posterior, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraws <- add_predicted_draws(\n  tibble(weight = seq(30, 100, 1)),   \n  model_height_weight_prior,\n  value = \"fitted_height\",\n  ndraws = 100\n) \n\nggplot(draws, aes(x = weight, y = fitted_height, group = .draw)) +\n  geom_line(alpha = .5) \n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- as_draws_df(model_height_weight_prior)\n\nggplot(samples, aes(x = b_weight)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nIn both cases, we see that we get quite some implausible values. So let's take a prior that produces fewer crazy observations, such as a prior of `normal(0, 1)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height_weight_prior2 <- brm(\n  height ~ 1 + weight,  \n  data = data, \n  family = gaussian,\n  prior = c(\n      prior(normal(170, 10), class = \"Intercept\"),\n      prior(cauchy(5, 1), class = \"sigma\"),\n      prior(normal(0, 1), coef = \"weight\")\n    ),\n  cores = 4,\n  seed = 4, \n  sample_prior = \"only\",\n  file = \"models/model_height_weight_prior2.rds\"\n)\n\nmodel_height_weight_prior2 %>%\n  fitted_draws(tibble(weight = seq(30, 100, 1)), value = \"fitted_height\", n = 100) %>%\n  ggplot(aes(x = weight, y = fitted_height, color = .draw, group = .draw)) +\n    geom_line(alpha = .5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `fitted_draws` and `add_fitted_draws` are deprecated as their names were confusing.\nUse [add_]epred_draws() to get the expectation of the posterior predictive.\nUse [add_]linpred_draws() to get the distribution of the linear predictor.\nFor example, you used [add_]fitted_draws(..., scale = \"response\"), which\nmeans you most likely want [add_]epred_draws(...).\n```\n:::\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/height_weight_prior2-1.png){width=672}\n:::\n:::\n\n\nThat looks much better. It could still be refined because it produces several highly implausible results, but let's stick with this for now and run the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height_weight <- brm(\n    height ~ 1 + weight,  \n    data = data, \n    family = gaussian,\n    prior = c(\n        prior(normal(170, 10), class = \"Intercept\"),\n        prior(cauchy(5, 1), class = \"sigma\"),\n        prior(normal(0, 1), coef = \"weight\")\n      ),\n    cores = 4,\n    seed = 4, \n    sample_prior = TRUE,\n    file = \"models/model_height_weight.rds\"\n  )\n```\n:::\n\n\nLet's check the chains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model_height_weight)\n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nAnd let's compare the prior and posterior distribution of our weight predictor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- model_height_weight %>%\n  posterior_samples() %>%\n  select(prior_b_weight, b_weight) %>%\n  pivot_longer(cols = everything()) %>%\n  mutate(\n    distribution = if_else(str_detect(name, \"prior\"), \"prior\", \"posterior\")\n  ) %>%\n  select(-name)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Method 'posterior_samples' is deprecated. Please see ?as_draws for\nrecommended alternatives.\n```\n:::\n\n```{.r .cell-code}\nggplot(results, aes(x = value, fill = distribution)) +\n  geom_histogram(binwidth = 0.1) +\n  coord_cartesian(xlim = c(-3, 3)) +\n  labs(x = \"Average height\", y = \"\", fill = \"Distribution\")\n```\n\n::: {.cell-output-display}\n![](my-bayesian-workflow-and-tutorial_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nAgain our prior was quite broad and our posterior is much more narrow. In fact, the estimates are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_height_weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: height ~ 1 + weight \n   Data: data (Number of observations: 352) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept   113.99      1.95   110.21   117.81 1.00     3960     3085\nweight        0.90      0.04     0.82     0.99 1.00     3961     3189\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     5.09      0.19     4.74     5.48 1.00     4790     2766\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\nWeight is positively related with height (0.90), with a 95% CI ranging from 0.82 to 0.99.\n\n## Summary\n\nThe workflow consists of the following steps:\n\n1.  Determine the model you want to run\n2.  Check which priors are necessary with the `get_priors()` function\n3.  Set priors\n4.  Run `brms()` and sample from the prior only\n5.  Perform prior predictive checks to see whether the priors produce plausible values\n6.  Adapt the priors if needed\n7.  Run the model with the final priors\n8.  Check the chains\n9.  Inspect the model output\n10. Optional: Compare priors to posteriors to see how your beliefs have updated\n",
    "supporting": [
      "my-bayesian-workflow-and-tutorial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}