---
title: "Bayesian tutorial: Two groups"
description: "The fourth of a series of tutorial posts on Bayesian analyses. In this post I focus on using `brms` to model the difference between two groups."
date: 2022-11-24
categories:
  - statistics
  - tutorial
  - Bayesian statistics
  - regression
code-fold: true
code-tools: true
toc: true
draft: true
---

In this blog post I will cover how to use `brms` to analyze the difference between two groups. Interestingly, this might seem like a very simple analysis, but there are actually many ways to go about this. I'll try to cover each one here. 

The data we'll use is the same as in the previous posts. This data contains the sex of the participant in a column called `male`, in addition to their height, weight, and age. This means we can investigate, say, whether there's a difference in height between men and women.

Run the following setup code if you want to follow along.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(brms)
library(tidybayes)

data <- read_csv("Howell1.csv")
data <- filter(data, age >= 18)

theme_set(theme_minimal())

colors <- c("#93CFDB", "#1E466E")
```

## Dummy coding

Probably the most common method to analyze the difference between two groups is to regress the outcome on dummy coded data. The R formula for this is `height ~ male`. Let's see what priors we need to set for this.

```{r}
#| label: get-prior-dummy
get_prior(height ~ male, data = data)
```

The output shows we need to set a prior on sigma, the Intercept, and on the male coefficient. The sigma parameter is the same as before, but the intercept and male coefficient are different. The intercept now refers to the heights of female participants and the male coefficient refers to the difference between males and females. 

Writing down this model shows that it's actually the same as the simple regression model:

$$\displaylines{heights_i âˆ¼ Normal(\mu_i, \sigma) \\ \mu_i = \alpha + \beta x_i}$$

Despite this similarity, there's an issue here that we need to get into. Let's demonstrate this issue by setting some priors visualizing them.

```{r}
#| label: model-gender-dummy
model_gender_dummy <- brm(
  height ~ 1 + male,  
  data = data, 
  family = gaussian,
  prior = c(
    prior(normal(160, 10), class = "Intercept"),
    prior(normal(5, 10), coef = "male"),
    prior(cauchy(5, 5), class = "sigma")
  ),
  sample_prior = TRUE,
  cores = 4
)
```


```{r}
#| label: data-preparation
data <- mutate(data, female = 1 - male)
```

```{r}
#| label: get-prior
get_prior(height ~ 0 + male + female, data = data)
```

What should the prior for $\sigma$ be? With the variables standardized, $\sigma$ is limited to range from 0 to 1. If the predictor explains all the variance of the outcome variable, the residuals will be 0, meaning $\sigma$ will be 0. If the predictor explains no variance, $\sigma$ is equal to 1 because it will be similar to the standard deviation of the outcome variable, which is 1 because we've standardized it. Interestingly, this also means that the prior for $\sigma$ is now dependent on the prior for the slope, because the slope is what determines how much variance is explained in the outcome variable. So let's think about the prior for the slope.

The prior for the slope is a bit easier now. We can specify a normal distribution with a mean of 0 and a standard deviation of 0.5, together with a lower bound of -1 and upper bound of 1. With a standard deviation of 0.5, we cover a large range of possible slopes, but assign more plausibility to smaller correlations and less plausibility to very high correlations (like 1 and -1).

As for $\sigma$, let's keep it simple and use a uniform prior that assign equal plausibility to each value between 0 and 1.

```{r}
#| label: model-height-weight_z
model_height_male <- brm(
  height ~ 0 + male + female,  
  data = data, 
  family = gaussian,
  prior = c(
    prior(normal(170, 10), coef = "female"),
    prior(normal(170, 10), coef = "male"),
    prior(cauchy(5, 5), class = "sigma")
  ),
  sample_prior = TRUE,
  cores = 4,
  seed = 4,
  file = "models/model_height.rds"
)

model_height_male

draws <- spread_draws(model_height_male, b_male, b_female)
draws <- mutate(draws, diff = b_male - b_female)

```

