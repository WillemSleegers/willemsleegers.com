---
title: "Analysis templates"
description: "A collection of templates for analyzing different use cases."
date: 2024-06-18
categories:
  - statistics
toc: true
draft: true
code-fold: true
df-print: kable
---

```{r}
#| label: setup
#| message: false
# Load packages
# General
library(tidyverse)
library(ggdist)

# Simulation
library(latent2likert)
library(magrittr)

# Analysis
library(brms)
library(marginaleffects)

options(
  mc.cores = 4,
  brms.threads = 4,
  brms.backend = "cmdstanr",
  brms.file_refit = "on_change"
)

# Tables
library(gt)

# Load custom functions
#| label: function
format_number <- function(
    x,
    trailing_digits = 2,
    digits = NULL,
    omit_zero = FALSE) {
  # Convert the number to a string to use regex to extract different parts
  # of the number (e.g., decimals)
  string <- as.character(x)

  # Extract and count decimals
  decimals <- stringr::str_extract(string, "(?<=\\.).+")
  decimals_n <- dplyr::if_else(is.na(decimals), 0, stringr::str_length(decimals))

  # Count number of leading zeroes in the decimals
  zeroes <- stringr::str_extract(string, "(?<=\\.)0+")
  zeroes_n <- dplyr::if_else(is.na(zeroes), 0, stringr::str_length(zeroes))

  # If digits are set, it overrules trailing digits
  if (!is.null(digits)) {
    output <- format(round(x, digits), nsmall = digits)
  } else {
    trailing_digits <- dplyr::if_else(
      decimals_n > trailing_digits,
      trailing_digits + zeroes_n,
      trailing_digits
    )

    output <- x |>
      round(digits = trailing_digits) |>
      purrr::map2_chr(trailing_digits, formatC, format = "f")
  }

  # Remove leading zero
  if (omit_zero) output <- stringr::str_remove(output, "^0")

  return(output)
}

format_interval <- function(x, lower, upper) {
  paste0(format_number(x), " [", format_number(lower), ", ", format_number(upper), "]")
}

# Theme
theme_set(theme_minimal())
```

## Between-subjects group differences

### Simulate data

```{r}
#| label: simulate-between-subjects-group-differences
# Parameters
k <- 5
means <- c(-1, -0.5, 0, 0.2, 0.75)
sds <- c(1, 1, 1, 1, 1)
N <- 200

# Simulate
set.seed(4689)
samples <- rlikert(size = N, n_items = 5, n_levels = 7, mean = means, sd = sds)

# Prepare data
data <- samples |>
  set_colnames(LETTERS[1:k]) |>
  as_tibble() |>
  mutate(id = seq_len(n())) |>
  pivot_longer(
    cols = -id,
    names_to = "condition",
    values_to = "response"
  )

data |>
  head() |>
  gt()
```

### Frequentist analysis

```{r}
#| label: frequentist-between-subjects-group-differences
model <- lm(response ~ condition, data = data)
summary(model)
```

#### Predicted means

```{r}
#| label: frequentist-predictions-between-subjects-group-differences
predictions <- avg_predictions(model, variable = "condition")

predictions |>
  select(condition, estimate, conf.low, conf.high) |>
  gt()

ggplot(predictions, aes(x = estimate, y = condition)) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .2) +
  geom_point() +
  geom_text(
    aes(label = format_interval(estimate, conf.low, conf.high)),
    nudge_y = -0.25
  ) +
  labs(
    x = "Predicted mean",
    y = "Condition"
  )
```

#### Comparisons

```{r}
#| label: frequentist-comparisons-between-subjects-group-differences
comparisons <- avg_comparisons(model, variable = "condition")
comparisons |>
  select(
    contrast, estimate, conf.low, conf.high, std.error, statistic, p.value
  ) |>
  as_tibble() |>
  gt()

ggplot(comparisons, aes(x = estimate, y = contrast)) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .2) +
  geom_point() +
  geom_text(
    aes(label = format_interval(estimate, conf.low, conf.high)),
    nudge_y = -0.25
  ) +
  labs(
    x = "Mean difference",
    y = "Contrast"
  )
```

### Bayesian analysis

```{r}
#| label: bayesian-between-subjects-group-differences
model <- brm(
  response ~ 0 + condition,
  data = data,
  family = gaussian(),
  prior = c(
    prior(normal(4, 1), class = "b"),
    prior(cauchy(1, 1), class = "sigma")
  ),
  file = "./models/model-between-subjects-group-difference.rds"
)
summary(model)
```

#### Predicted means

```{r}
#| label: bayesian-predictions-between-subjects-group-differences
predictions <- model |>
  avg_predictions(
    variables = "condition",
    type = "response"
  )

draws <- posterior_draws(predictions)

ggplot(predictions, aes(x = estimate, y = condition)) +
  stat_slab(aes(x = draw), data = draws, scale = 0.5) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .20) +
  geom_point() +
  geom_text(
    aes(label = format_interval(estimate, conf.low, conf.high)),
    nudge_y = -0.25
  ) +
  labs(x = "Predicted mean", y = "Condition")
```

#### Comparisons

```{r}
#| label: bayesian-comparisons-between-subjects-group-differences
comparisons <- model |>
  avg_comparisons(
    variables = "condition",
    type = "response"
  )

draws <- posterior_draws(comparisons)

ggplot(comparisons, aes(x = estimate, y = contrast)) +
  stat_slab(aes(x = draw), data = draws, scale = 0.5) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .20) +
  geom_point() +
  geom_text(
    aes(label = format_interval(estimate, conf.low, conf.high)),
    nudge_y = -0.25
  ) +
  labs(x = "Mean difference", y = "Contrast")
```
