---
title: "Useful R snippets"
description: "A collection of useful R snippets"
date: 2024-09-21
updated: 2025-01-02
categories:
  - R
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Create a new column with a value from a specific cell

Take the following simple data frame:

```{r}
#| label: data-column-with-cell-value
df <- tribble(
  ~x,
  ~y,
  "A",
  0.1,
  "B",
  0.4,
  "C",
  0.2,
  "D",
  0.3,
  "E",
  0.5
)

df
```

Using the following code, we can add a new column that repeats a specific value from column `y` based on a value in a column `x`.

```{r}
#| label: snippet-column-with-cell-value
df <- mutate(df, z = nth(y, which(x == "B")))
df
```

This can be useful if you want to do scaling based on specific values.

```{r}
#| label: usecase-column-with-cell-value
df |>
  mutate(y_scaled = y / z)
```

## A custom function to create a vector of 1s and 0s with a specific proportion of 1s

```{r}
#| label: rbinary-function
# Custom function to generate a vector of 1s and 0s with a specified proportion of 1s
rbinary <- function(p, n, shuffle = TRUE) {
  # Validate inputs
  if (!is.numeric(n) || length(n) != 1 || n <= 0 || n != round(n)) {
    stop("n must be a positive integer")
  }

  if (!is.numeric(p) || length(p) != 1 || p < 0 || p > 1) {
    stop("p must be a numeric value between 0 and 1")
  }

  # Check if p*n is an integer to avoid rounding
  if (abs(p * n - round(p * n)) > .Machine$double.eps^0.5) {
    stop(
      "The product of proportion (p) and sample size (n) must be an integer to avoid rounding"
    )
  }

  # Generate the binary vector
  ones_count <- p * n
  result <- c(rep(1, ones_count), rep(0, n - ones_count))

  # Shuffle the vector only if shuffle is TRUE
  if (shuffle) {
    result <- sample(result)
  }

  return(result)
}
```

